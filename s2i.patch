diff --git pkg/api/types.go pkg/api/types.go
index 4deca5a..fefa43b 100644
--- pkg/api/types.go
+++ pkg/api/types.go
@@ -122,6 +122,9 @@ type Config struct {
 	// Incremental describes whether to try to perform incremental build.
 	Incremental bool
 
+	// ClearCache describes whether to clean cache or not
+	ClearCache bool
+
 	// IncrementalFromTag sets an alternative image tag to look for existing
 	// artifacts. Tag is used by default if this is not set.
 	IncrementalFromTag string
diff --git pkg/build/strategies/dockerfile/dockerfile.go pkg/build/strategies/dockerfile/dockerfile.go
index 7556a35..032d273 100644
--- pkg/build/strategies/dockerfile/dockerfile.go
+++ pkg/build/strategies/dockerfile/dockerfile.go
@@ -162,7 +162,11 @@ func (builder *Dockerfile) CreateDockerfile(config *api.Config) error {
 	}
 
 	// main stage of the Dockerfile
-	buffer.WriteString(fmt.Sprintf("FROM %s\n", config.BuilderImage))
+	if config.ClearCache {
+		buffer.WriteString(fmt.Sprintf("FROM %s AS build\n", config.BuilderImage))
+	} else {
+		buffer.WriteString(fmt.Sprintf("FROM %s\n", config.BuilderImage))
+	}
 
 	imageLabels := util.GenerateOutputImageLabels(builder.sourceInfo, config)
 	for k, v := range config.Labels {
@@ -282,6 +286,31 @@ func (builder *Dockerfile) CreateDockerfile(config *api.Config) error {
 		buffer.WriteString("\n")
 	}
 
+	if config.ClearCache {
+		buffer.WriteString(fmt.Sprintf("FROM %s\n", config.BuilderImage))
+
+		if len(imageLabels) > 0 {
+			first := true
+			buffer.WriteString("LABEL ")
+			for k, v := range imageLabels {
+				if !first {
+					buffer.WriteString(fmt.Sprintf(" \\\n      "))
+				}
+				buffer.WriteString(fmt.Sprintf("%q=%q", k, v))
+				first = false
+			}
+			buffer.WriteString("\n")
+		}
+
+		env := createBuildEnvironment(config.WorkingDir, config.Environment)
+		buffer.WriteString(fmt.Sprintf("%s", env))
+
+		buffer.WriteString(fmt.Sprintf("COPY --from=build / /\n"))
+	}
+
+	// Checkfile initiation
+	buffer.WriteString("RUN [ -z \"$CHECK_FILE\" ] && echo 'Skipping checkfile initiation' || checkfile init\n")
+
 	if _, provided := providedScripts[constants.Run]; provided {
 		buffer.WriteString(fmt.Sprintf("CMD %s\n", sanitize(filepath.ToSlash(filepath.Join(scriptsDestDir, "run")))))
 	} else {
diff --git pkg/cmd/cli/util/util.go pkg/cmd/cli/util/util.go
index 80b010b..1d6830e 100644
--- pkg/cmd/cli/util/util.go
+++ pkg/cmd/cli/util/util.go
@@ -19,6 +19,8 @@ func AddCommonFlags(c *cobra.Command, cfg *api.Config) {
 		"Operate quietly. Suppress all non-error output.")
 	c.Flags().BoolVar(&(cfg.Incremental), "incremental", false,
 		"Perform an incremental build")
+	c.Flags().BoolVar(&(cfg.ClearCache), "clearCache", false,
+		"Clean every layers before assemble")
 	c.Flags().BoolVar(&(cfg.RemovePreviousImage), "rm", false,
 		"Remove the previous image during incremental builds")
 	c.Flags().StringVar(&(cfg.CallbackURL), "callback-url", "",
